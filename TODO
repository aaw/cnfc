* implement DFA minimization
* redo the interface for tuple_add, tuple_mul since we don't always use the
  vars passed in as result. sometimes we replace them.
* Rename generate_var, generate_cnf to evaluate*
* Rework model.py so that we don't need to pass pad_fn into tuple_mul. We
  currently need this because tuples.py would have a circular dependency
  if it knew about BooleanLiteral, which is defined in model.py. But it
  should be possible to split out the basics of the model (var, lit, bool)
  into a separate module and fix this so that tuple_mul can call zero_pad.
  (This applies to rpad too, which we pass into tuple_mul)
* Allow tuple comparison, addition, etc. with different bit widths
* Implement very simple clause caching/suppressing duplicate clauses
* Add several more examples
  * ?
* Support cardinality constraints compared to one another:
  NumTrue(x,y,z) >= NumFalse(w,v)
* Support cardinality constraints as variable additions:
  Implies(NumTrue(x,y,z) > 1, NumFalse(w,v) > 0)
* Implement a parsing pass that puts expressions into a canonical form so we can
  cache/reuse them if they reoccur in other subexpressions
